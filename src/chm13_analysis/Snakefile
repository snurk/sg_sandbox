import tempfile
import os
import re
import glob
import time
import math

#basic variable setup
configfile: 'config.yaml'

CANU_BIN=config['CANU_BIN']
ASSEMBLY=config['ASSEMBLY']
BUBBLE_DIFF=config.get('BUBBLE_DIFF', 2000)
REFERENCE=config.get('REFERENCE_PATH','')

localrules: all

rule all:
    input:
        'simplified_chr_analysis/finish.flag' if len(REFERENCE) > 0 else 'simplified.gfa'

rule pipe:
    input:
        ASSEMBLY + '/unitigging/4-unitigger/asm.best.edges'
    output:
        'simplified.gfa',
        'simplified.noseq.gfa',
        'simplified.nodes.fasta'
    threads:
        12
    log:
        'pipe.log'
    params:
        min_ovl=config['MIN_OVERLAP'],
        ovl_er=config['OVERLAP_ERATE'],
        weak_thrs=expand('{thr}', thr=config['WEAK_OVERLAP_THRESHOLDS'])
    shell:
        '''
        export BUBBLE_DIFF={BUBBLE_DIFF}
        export ADVANCED_FINAL_SIMPLIF=0
        $SCRIPT_PATH/../pipe.sh {CANU_BIN} {ASSEMBLY} {params.min_ovl} {params.ovl_er} {params.weak_thrs} &> {log}
        '''

rule mashmap:
    input:
        '{path}.nodes.fasta'
    output:
        '{path}.nodes.hg38.out'
    threads:
        16
    log:
        '{path}.mashmap.log'
    shell:
        '$SCRIPT_PATH/mashmap.sh {input} {REFERENCE}.fasta {output} &> {log}'

rule chr_analysis:
    input:
        mashmap='{path}.nodes.hg38.out',
        gfa='{path}.noseq.gfa'
    output:
        touch('{path}_chr_analysis/finish.flag')
    log:
        '{path}_chr_analysis.log'
    shell:
        '$SCRIPT_PATH/chr_analysis.sh {wildcards.path}_chr_analysis {input.mashmap} {input.gfa} {REFERENCE}.colors {REFERENCE}.bed &> {log}'
